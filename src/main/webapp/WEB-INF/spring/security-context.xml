<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- enable Method level [vs URL level] authorization This work for APPLICATION 
		Level scanned components Does NOT recognize WEB level components - for THAT 
		need to place enable line in Dispatcher-servlet -->
	<security:global-method-security
		pre-post-annotations="enabled" />

	<!-- security:http enables security filter mechanism...name space configuration 
		is activated -->
	<!-- use-expressions enables URL level authorization -->
	<security:http use-expressions="true">
		
		<security:intercept-url pattern="/dashboard**"
			access="isAuthenticated()" />
		<security:intercept-url pattern="/group**"
			access="isAuthenticated()" />

		<security:form-login login-page="/login"
			default-target-url="/" always-use-default-target="false"
			authentication-failure-handler-ref="authenticationFailureHandler" />
		<security:logout logout-success-url="/loggedout"
			logout-url="/logout" />
	</security:http>
	
	<bean id="authenticationFailureHandler"
	    class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
	    <property name="exceptionMappings">
	        <props>
	            <prop key="org.springframework.security.authentication.BadCredentialsException">/login-fail/BadCredentials</prop>
	            <prop key="org.springframework.security.authentication.CredentialsExpiredException">/login-fail/CredentialsExpired</prop>
	            <prop key="org.springframework.security.authentication.LockedException">/login-fail/AccountLocked</prop>
	            <prop key="org.springframework.security.authentication.DisabledException">/login-fail/AccountDisabled</prop>
	        </props>
	    </property>
	</bean>
	
	<bean id="myUserDetailService" class="org.qoders.easywallet.service.impl.UserDetailServiceImpl"></bean>
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="myUserDetailService">
			<security:password-encoder hash="bcrypt" />
		</security:authentication-provider>
		<!--security:authentication-provider>
			<security:password-encoder hash="bcrypt" />
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="SELECT username,password,enabled FROM User WHERE username=?"
				authorities-by-username-query="SELECT u.username, a.authority FROM User u, Authority a WHERE u.id = a.user_id AND u.username=?" />
		</security:authentication-provider-->
	</security:authentication-manager>
	
	
</beans>
